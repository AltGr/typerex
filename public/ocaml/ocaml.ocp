begin
  generated = true
  dirname = [ "%{OCAMLLIB}%/compiler-libs" ]
  begin library "ocamlcommon"
  end
  begin library "ocamlbytecomp"
    requires = [ "ocamlcommon" ]
  end
  begin library "ocamloptcomp"
    requires = [ "ocamlcommon" ]
  end
end

begin library "ocaml-bytecomp"
  requires = [ "ocamlbytecomp" ]
end

begin library "ocaml-typing"
  requires = [ "ocamlcommon" ]
end

begin library "ocaml-parsing"
  requires = [ "ocamlcommon" ]
end

begin library "ocaml-utils"
  requires = [ "ocamlcommon" ]
end

begin library "ocaml-driver"
  requires = [ "ocamlbytecomp" ]
end


(*
(**************************************************************************)
(*                                                                        *)
(*                        TypeRex OCaml Tools                             *)
(*                                                                        *)
(*                             OCamlPro                                   *)
(*                                                                        *)
(*  Copyright 2011-2012 OCamlPro                                          *)
(*  All rights reserved.  See accompanying files for the terms under      *)
(*  which this file is distributed. In doubt, contact us at               *)
(*  contact@ocamlpro.com (http://www.ocamlpro.com/)                       *)
(**************************************************************************)

(* This is needed because pprintast.ml in the OCaml distribution
   depends on List.iteri, that is only available with OCaml 4.00.0.
   We should create a preprocessor that downgrades code compatibility
   using ocplib-lang.
*)
begin library "ocaml-tools-parsing"
  files = [  "pprintast.ml" ]
  requires = [ "ocaml-parsing" "ocplib-lang" ]
end


begin library "ocaml-bytecomp-config"

  files = [ "opcodes.ml"]
(*  requires = [ "ocplib-system" "typerex-config" ] *)

end

begin library "ocaml-runtime-config"

  files = [ "runtimedef.ml"]

end
subdir = [ "ocaml" ]

begin library "ocaml-utils"
  subdir += [ "utils" ]
  files = [
    "misc.ml";
    "tbl.ml" (* (no_mli = true) *)
    "config.mli"
    "config.mlp" (ml = true
                  pp_requires = [ "ocp-subst-config:byte" ]
                  pp = [ "%{ocp-subst-config_DST_DIR}%/ocp-subst-config.byte" "-config-file" "typerex.config" ]

    )
    "clflags.ml";
    "terminfo.ml";
    "ccomp.ml";
    "warnings.ml";
    "consistbl.ml";
  ]

  requires = [ "ocp-subst-config" (syntax) (* "ocaml-config" *) (* "ocaml-stdlib" *) ]
end


begin library "ocaml-parsing"
  subdir += [ "parsing" ]
  files = [
    "location.ml";
    "asttypes.mli";
    "longident.ml";
    "syntaxerr.ml";
    "parsetree.mli";
    "printast.ml";
    "parser.mly";
    "lexer.mll";
    "parse.ml";
  ]
  requires = [
    "ocaml-utils";
  ]
end



begin library "ocaml-typing"
  subdir += [ "typing" ]
  files = [
(*    "unused_var.ml"; *)
    "ident.ml" (* ( no_mli = true ) *)
    "path.ml";
    "primitive.ml";
    "types.ml" (* ( no_mli = true ) *)
    "annot.mli";
    "btype.ml";
    "outcometree.mli";
    "oprint.ml";
    "subst.ml";
    "predef.ml";
    "datarepr.ml";
    "cmi_format.ml";
     "env.ml" (* ( no_mli = true ) *)
    "typedtree.ml";
    "cmt_format.ml";
    "ctype.ml";
    "printtyp.ml";
    "includeclass.ml";
    "mtype.ml";
    "includecore.ml";
    "includemod.ml";
    "parmatch.ml";
    "typetexp.ml";
    "stypes.ml";
    "typecore.ml";
    "typedecl.ml";
    "typeclass.ml";
    "typemod.ml";

     ]

  requires = [
    "ocaml-parsing"
  ]

end

begin library "ocaml-transl"
  subdir += [ "bytecomp" ]
  files = [
  "lambda.ml" (no_mli = true)
  "printlambda.ml"
  "typeopt.ml"
  "switch.ml"
  "matching.ml"
  "translobj.ml" "translcore.ml"
  "translclass.ml" "translmod.ml"
  "simplif.ml"
(*  "runtimedef.ml" AUTO GENERATED MOVED To ocaml-config *)


  ]

  requires = [
    "ocaml-typing"
  ]
end

begin library "ocaml-bytecomp"
  subdir += [ "bytecomp" ]
   files = [
     "meta.ml" "instruct.ml" "bytegen.ml"
  "printinstr.ml"
  (* "opcodes.ml" AUTO GENERATED MOVED To ocaml-config *)
 "emitcode.ml"
  "bytesections.ml" "dll.ml" "symtable.ml"
  "bytelink.ml" "bytelibrarian.ml" "bytepackager.ml"
  "cmo_format.mli"

   ]

  requires = [
    "ocaml-transl"
    "ocaml-bytecomp-config"
    "ocaml-runtime-config"
  ]
end


(* TODO:
 For now, we only compile for AMD64, because we cannot configure the lines
here (we could autogen this file from a .ocp.in).

 We have a bytecode dependency towards cvt_emit.byte, as a preprocessor.
 What would happen if we only want to compile in native-code ? Maybe we
 should use a wrapper like ocp-manager to lookup these commands during
 compilation, and choose the best one available at that point.

*)

begin library "ocaml-asmcomp-amd64"
  subdir += [ "asmcomp" ]
files = [

  "amd64/arch.ml"
  "debuginfo.ml"
  "cmm.ml" "printcmm.ml"
  "reg.ml" "mach.ml"
  "amd64/proc.ml"
  "clambda.ml" "compilenv.ml"
  "closure.ml" "cmmgen.ml"
  "printmach.ml"
  "selectgen.ml"
  "amd64/selection.ml"
  "comballoc.ml" "liveness.ml"

  "spill.ml" "split.ml"
  "interf.ml" "coloring.ml"
  "reloadgen.ml"
  "amd64/reload.ml"
  "printlinear.ml"
  "linearize.ml"
  "schedgen.ml"
  "amd64/scheduling.ml"
  "emitaux.ml"
  "amd64/emit.mlp" ( ml = true pp = [ "%{ocp-cvtemit_DST_DIR}%/ocp-cvtemit.byte" ]
                     pp_requires = [ "ocp-cvtemit:byte" ]
  )
  "asmgen.ml"
  "asmlink.ml" "asmlibrarian.ml" "asmpackager.ml"

  "cmx_format.mli"

]

  pp_requires = [ "ocp-cvtemit:byte" ]
  requires = [ "ocaml-transl" "ocaml-runtime-config" "ocp-cvtemit" (syntax) ]


end


begin
  subdir += [ "tools" ]

  begin library "ocaml-depend"
     files = [ "depend.ml" ]
     requires = [ "ocaml-parsing" ]
  end

  begin library "ocaml-tools-typing"
    files = [  "untypeast.ml" "typedtreeIter.ml" ]
    requires = [ "ocaml-typing" "ocaml-tools-parsing" ]
  end
end

begin
  subdir += [ "driver" ]

begin library "ocaml-driver"

  files = [
   "pparse.ml"
   "errors.ml"
   "compile.ml"
    "main_args.ml"
    ]
  requires = [ "ocaml-bytecomp" ]
end

begin program "ocp-ocamlc"

   files = [
     "main.ml"
   ]

   requires = [ "ocaml-driver" ]
  has_asm = false

end

begin program "ocp-ocamlopt-amd64"

   files = [
   "opterrors.ml"
   "optcompile.ml"
     "optmain.ml"
   ]

   requires = [ "ocaml-asmcomp-amd64" "ocaml-driver" ]

end

end

begin
  subdir += [ "ocamldoc" ]

begin library "ocaml-doc-parsing"

  files = [
        "odoc_config.ml"
	"odoc_messages.ml"
	"odoc_global.ml"
	"odoc_types.ml"
	"odoc_misc.ml"
	"odoc_text_parser.mly"
	"odoc_text_lexer.mll"
	"odoc_text.ml"
	"odoc_name.ml"
	"odoc_parameter.ml"
	"odoc_value.ml"
	"odoc_type.ml"
	"odoc_exception.ml"
	"odoc_class.ml"
	"odoc_module.ml"
	"odoc_print.ml"
	"odoc_str.ml"
	"odoc_comments_global.ml"
	"odoc_parser.mly"
	"odoc_lexer.mll"
	"odoc_see_lexer.mll"
        ]
  requires = [ "ocaml-typing" "unix" "str" ]

end

begin library "ocaml-doc"

  files = [
	"odoc_env.ml"
	"odoc_merge.ml"
	"odoc_sig.ml"
	"odoc_ast.ml"
	"odoc_control.ml"
	"odoc_inherit.ml"
	"odoc_search.ml"
	"odoc_scan.ml"
	"odoc_cross.ml"
	"odoc_comments.ml"
	"odoc_dep.ml"
	"odoc_analyse.ml"
	"odoc_info.ml"
        ]


  requires = [ "ocaml-doc-parsing" "ocaml-typing" "ocaml-depend" "ocaml-transl" "unix" "str" ]


end

begin library "ocaml-doc-plugins"

  files = [
	"odoc_dag2html.ml"
	"odoc_to_text.ml"
	"odoc_ocamlhtml.mll"
	"odoc_html.ml"
	"odoc_man.ml"
	"odoc_latex_style.ml"
	"odoc_latex.ml"
	"odoc_texi.ml"
	"odoc_dot.ml"
	"odoc_gen.ml"
	"odoc_args.ml"
        (* "odoc.ml"  BUILD IT YOURSELF TO AVOID dynlink dependency *)
]


  requires = [ "ocaml-typing" "ocaml-doc" ]

end


end
*)
