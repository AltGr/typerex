(**************************************************************************)
(*                                                                        *)
(*                        TypeRex OCaml Studio                            *)
(*                                                                        *)
(*                 Thomas Gazagnaire, Fabrice Le Fessant                  *)
(*                                                                        *)
(*  Copyright 2011-2012 OCamlPro                                          *)
(*  All rights reserved.  This file is distributed under the terms of     *)
(*  the GNU Public License version 3.0.                                   *)
(*                                                                        *)
(*  TypeRex is distributed in the hope that it will be useful,            *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU General Public License for more details.                          *)
(*                                                                        *)
(**************************************************************************)

open IDE

module Make (L : Lang) = struct

  open L

  let create_command ~name ~doc ?keys cmd =
    create_command ~lang:L.lang ~name ~doc ?keys cmd

  (* Get the current OCaml phrase *)
  let get_phrase = create_command
    ~name:"ocp-get-current-phrase"
    ~doc:"Get the surrounding OCaml phrase at the current position"
    (bind temp_file (fun filename ->
      bind (save_buffer current_buffer filename) (fun _ ->
        exec_string [
          string "ocp-extract";
          filename;
          string "-comments";
          string "-pos";
          string_of_int current_position;
        ])))
    
  (* Goto the end of the current OCaml phrase *)
  let goto_end_of_phrase = create_command
    ~name:"ocp-goto-end-of-current-phrase"
    ~doc:"Goto the end of the current OCaml phrase"
    (bind temp_file (fun filename ->
      bind (save_buffer current_buffer filename) (fun _ ->
        bind (exec_int [
          string "ocp-extract";
          filename;
          string "-comments";
          string "-pos";
          string_of_int current_position;
          string "-format";
          string "end-loc";
        ]) goto_position)))

  (* Generate some code from type definition *)
  let _ = create_command
    ~name:"ocp-code-from-type"
    ~doc:"Generate some OCaml code from the current type declaration"
    ~keys:[ [CTRL; Char 'o']; [CTRL; Char 'g'] ]
    (bind
       (run get_phrase)
       (fun phrase ->
         bind
           (read_string
              ~initial:(string "to_string")
              ~exact:true
              (strings [ "to_string"; "printer" ]))
           (fun input ->
             bind
               (exec_string [
                 string "ocp-codegen";
                 string "-gen";
                 input;
                 phrase])
               (fun codegen ->
                 seq [
                   run goto_end_of_phrase;
                   insert (string "\n\n(* ");
                   insert timestamp;
                   insert (string " : generated by ocp-codegen *)\n");
                   insert codegen;
                 ]))))

end
