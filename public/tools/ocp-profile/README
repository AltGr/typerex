**************************************************************************
*                                                                        *
*                          Profile                                       *
*  Tiphaine Turpin                                                       *
*  Copyright 2009 INRIA Rennes - Bretagne Atlantique                     *
*                                                                        *
*  Profile is free software: you can redistribute it and/or modify       *
*  it under the terms of the GNU Lesser General Public License as        *
*  published by the Free Software Foundation, either version 3 of the    *
*  License, or (at your option) any later version.                       *
*                                                                        *
*  Profile is distributed in the hope that it will be useful,            *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*  GNU Lesser General Public License for more details.                   *
*                                                                        *
*  You should have received a copy of the GNU Lesser General Public      *
*  License along with Profile (see LICENSE.Profile under the root        *
*  directory of TypeRex).  If not, see <http://www.gnu.org/licenses/>.   *
*                                                                        *
**************************************************************************

                                Profile


This tinny tool implements a flexible approach to time profiling of
ocaml programs. We require the user to instrument the program
explicitely, which has two advantages:
- We avoid too fine-grained instrumentation (e.g., Pervasives.compare)
  which sometimes make the result of "-p" profiling irrelevant.
- We can differentiate successive steps in a piece of code without
  having to put them into separate functions.  Times are recorded for
  nodes (typically, functions) with and without child nodes (calees),
  and for individual edges.

See profile.mli for documentation.
