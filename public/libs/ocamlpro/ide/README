**************************************************************************
*                                                                        *
*                        TypeRex OCaml Studio                            *
*                                                                        *
*                 Thomas Gazagnaire, Fabrice Le Fessant                  *
*                                                                        *
*  Copyright 2011-2012 OCamlPro                                          *
*  All rights reserved.  This file is distributed under the terms of     *
*  the GNU Public License version 3.0.                                   *
*                                                                        *
*  TypeRex is distributed in the hope that it will be useful,            *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*  GNU General Public License for more details.                          *
*                                                                        *
**************************************************************************

                     OCamlPro IDE Library

This library provides various abstractions of a text editor, in order
to factorize as much as possible the interfacing of exetrnal tools
(such as TypeRex with these editors). This is ongoing work, but the
following features are currently available:

- module IDE defines module type [Lang] which contains an abstract
  type ['a Lang.t], which is meant to represent editor's behaviors in
  a symbolic way: the argument of the ['a] parameter represents the
  type of the command in terms of the underlying editors objects
  (strings, buffers, positions, ...). Combinators are provided in
  [Lang] to assemble sophisticated behaviors from primitive
  "functions". For each editor, one must provided an implementation of
  [Lang.t]. Currently, only an Emacs instanciation is available (in
  emacs/emacs.ml), which uses a raw source code representation to
  implement [Lang.t] (so the parameter ['a] is a phantom type in this
  setting).

- module IDE also provides a function to generate the glue to
  simultaneously bind a set of behaviors to named commands and key
  shortcuts, while specifying a documentation for them. This generates
  a file whose contents is editor-specific. For emacs, this is just a
  lisp source file which may be loaded at emacs startup.

- module IDE_Callback defines a module type [Callback] which is an API
  to invoke useful editor's functions directly from an external tool
  written in OCaml. For each editor, we may implement either directly
  [IDE_Callback.Callback] (for example if the editor happens to be the
  same OCaml program as the external tool), or its refined version
  [IDE_Callback.SocketCallback], which just states that callbacks are
  sent on a connection using the OCP RPC protocol (see library
  ocamlpro/rpc). Implementations are available for Emacs (full) and
  Eclipse (partial and currently outdated), with OCP RPC, respectively
  in directories emacs and in eclipse (+ ../../../OcaIDE).

- module Face tries to provide a common interface to text properties
  such as color, weight, etc., but needs to be redesigned.
